<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">
    <resultMap id="menuResultMap" type="com.ohgiraffers.section01.xml.MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>
    <select id="selectMenuByPrice" resultType="hashmap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        WHERE
            A.ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000"><!-- OGNL 기법 (gte >=) (lte <=)  (eq ==) (ne !=)
                                                     '' 구간의 값은 리터럴 값으로 보고 그게 아닌 이름은
                                                     객체 필드 또는 변수로 인식하게 작성하는 기법-->
            <![CDATA[AND A.MENU_PRICE < #{ price }]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND A.MENU_PRICE BETWEEN 20000 AND #{ price }
        </if>
        <if test="price gt 30000">
            AND A.MENU_PRICE BETWEEN 30000 AND #{ price }
        </if>
        ORDER BY A.MENU_CODE
    </select>
    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            AND B.CATEGORY_NAME = #{ value }
        </if>
        ORDER BY A.MENU_CODE
    </select>
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        WHERE
            A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">         <!-- switch 와 비슷한 구문 -->
                AND A.CATEGORY_CODE IN (4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                AND A.CATEGORY_CODE IN (8, 9, 10)
            </when>
            <otherwise>             <!-- default 와 비슷한 구문-->
                AND A.CATEGORY_CODE IN (11, 12)
            </otherwise>
        </choose>
        ORDER BY
            A.MENU_CODE
    </select>
    <select id="searchMenuByRandomMenuCode" parameterType="hashMap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        WHERE
            A.MENU_CODE IN          <!-- foreach = 자바의 for 문과 비슷하다.
                                        1. collection 속성 : 반복을 수행할 대상
                                        2. item : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                                        3. open : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                                        4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                                        5. close : 엘리먼트 구문의 마지막에 올 문자 -->
            <foreach collection="randomMenuCodeList" item="menuCode"  open="(" separator=", " close=")">
                #{ menuCode }
            </foreach>

    </select>

    <select id="searchManuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        <!--
        <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 를 붙여준다.
                        또한 where 엘리먼트 내부에 모든 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다.
                        엘리먼트 구문이 AND 나 OR 로 시작하면 자동으로 해당 단어를 지워준다.
         -->
        <!--
        <trim> 태그 : 조회 조건에 AND 혹은 OR 로 시작하지 않는 다른 문자로 시작하는 경우 등
                    where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
                    1. prefix : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                    2. prefixOverrides : 처리 후 엘리먼드 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
                    3. suffix : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                    4. suffixOverrides : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제
        -->

        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
<!--        <if test="condition != null and condition eq 'menuCode'">-->
<!--            WHERE A.MENU_CODE = #{ value }-->
<!--        </if>-->
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{ value }
            </where>
        </if>


    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashMap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
<!--        2조건만 충족할 경우 AND 로 시작되는 쿼리문이 되므로 오류 발생
            <if test="nameValue != null">-->
<!--            WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')-->
<!--        </if>-->
<!--        <if test="categoryValue != null">-->
<!--            AND A.CATEGORY_CODE = #{ categoryValue }  2조건만 충족할 경우 AND 로 시작되는 쿼리문이 되므로 오류 발생-->
<!--        </if>-->


<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND A.CATEGORY_CODE = #{ categoryValue }-->
<!--            </if>-->
<!--        </where>-->

        <trim prefix="WHERE" prefixOverrides="AND || OR">
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>

    </select>


<!--  1. 메뉴명 값을 입력하지 않은 경우 set 이 붙지 않아 오류 발생.-->
    <update id="modifyMenu" parameterType="hashMap">
        UPDATE
            TBL_MENu
        <set>  <!-- <where 과 비슷하게 동작 -->
            <if test="name != null and name != ''">
                MENU_NAME = #{ name }
            </if>
            <if test="categoryCOde != null and categoryCode gt 0">
                , CATEGORY_CODE = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{ orderableStatus }
            </if>
        </set>
        WHERE MENU_CODE = #{ code }
    </update>
</mapper>